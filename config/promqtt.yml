# promqtt Condfiguration

# Configuration related to the MQTT broker
mqtt:
  broker: npi3
  port: 1883
  topic: '#'


# Configuration of the HTTP server
http:
  interface: 0.0.0.0
  port: 8086


# Available metrics that can be published to Prometheus
metrics:

  # Name of the metric
  promqtt_pressure:

    # Metric type according to prometheus, e.g. gauge or counter
    type: gauge

    # Help text in prometheus output
    help: Air pressure in millibar

    # If present not 0, a metric is removed from the prometheus output, if it
    # has not been updated for this many seconds.
    timeout: 120

    with_update_counter: True

  promqtt_humidity:
    type: gauge
    help: 'Relative humidity in percent'
    timeout: 120
  promqtt_temperature:
    type: gauge
    help: 'Temperature in degree celsius'
    timeout: 120
  promqtt_rssi:
    type: gauge
    help: 'Relative signal strength indicator'
    timeout: 120
  promqtt_vcc:
    type: gauge
    help: 'Node supply voltage in volt'
    timeout: 120
  promqtt_power:
    type: gauge
    help: 'Power state'
    timeout: 120
  promqtt_battery:
    type: gauge
    help: 'Battery state in percent'
    timeout: 120
    with_update_counter: True

# Types of devices to handle
types:

  # Arbitrary name of a device
  aqara_node:

    # Metric to publish
    promqtt_rssi:

      # How to extract the value from the message received from MQTT. This is
      # a Python expression.
      value: "data['linkquality']"

      # Labels to add to the metric
      labels:
        node: 'tlist[1]'
        sensor: 'aqara'

    promqtt_battery:
      value: "data['battery']"
      labels:
        node: 'tlist[1]}'
        sensor: 'aqara'

    promqtt_vcc:
      measurement: "promqtt_vcc"
      value: "{msg.data[voltage]}"
      factor: 0.001
      offset: 0
      labels: { 'node': '{msg.topic_list[1]}', 'sensor': 'aqara' }

  # Example message:
  # Topic: zigbee2mqtt/aqara_sens_1
  # Message payload: {"temperature":25.99,"linkquality":86,"humidity":45.86,
  #  "pressure":999,"battery":91,"voltage":2985}
  aqara_sensor:
    promqtt_temperature:
      value: "{msg.data[temperature]}"
      labels: { 'node': '{msg.topic_list[1]}', 'sensor': 'aqara' }

    promqtt_pressure:
      value: "{msg.data[pressure]}"
      labels: { 'node': '{msg.topic_list[1]}', 'sensor': 'aqara' }

    promqtt_humidity:
      value: "{msg.data[humidity]}"
      labels: { 'node': '{msg.topic_list[1]}', 'sensor': 'aqara' }

# List of MQTT messages to process
messages:
  - # The topics to handle. If the topic is prefixed with `re`, the value is
    # handled as a regular expression. Otherwise it must be exactly match the
    # topic of a received message.
    topics: ["re:zigbee2mqtt/aqara_(sw_01|sens_tph_01)"]

    # How to parse the message contents. Currently only `json` is supported.
    parser: "json"

    # Which types to use to convert data from the MQTT message into prometheus
    # metrics.
    types: ['aqara_node']

  - topics: ["zigbee2mqtt/aqara_sens_tph_01"]
    parser: "json"
    types: ['aqara_node', 'aqara_sensor']
